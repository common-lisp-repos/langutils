concept.lisp:    (prin1 (concept->string cn) stream)))
concept.lisp:(defvar *concept-vhash* nil)
concept.lisp:(defmethod lookup-canonical-concept-instance ((ta array))
concept.lisp:;;  (vechash-get ta *concept-vhash*))
concept.lisp:  (stdutils.gds:get-value *concept-vhash* ta))
concept.lisp:(defmethod clear-concept-cache ()
concept.lisp:  (setf *concept-vhash* (make-instance 'stdutils.gds:vector-keyed-table)))
concept.lisp:(defparameter *concept-store-scratch-array* (make-array 20 :element-type 'fixnum :adjustable t)
concept.lisp:(defmethod lookup-canonical-concept-instance ((lf list))
concept.lisp:;;  (vechash-get lf *concept-vhash*))
concept.lisp:  (stdutils.gds:get-value *concept-vhash* (list->array lf)))
concept.lisp:(defmethod register-new-concept-instance ((c concept))
concept.lisp:;;  (vechash-put (token-vector c) c *concept-vhash*)
concept.lisp:  (setf (stdutils.gds:get-value *concept-vhash* (token-vector c)) c)
concept.lisp:  (every #'eql (phrase-lemmas ph) (concept->token-array cn)))
concept.lisp:  (let ((ta1 (concept->token-array cn1))
concept.lisp:	(ta2 (concept->token-array cn2)))
concept.lisp:(defmethod-exported concept-contains ((csuper concept) (csub concept))
concept.lisp:  (search (concept->token-array csub) (concept->token-array csuper) :test #'eql))
concept.lisp:  (token-array->concept (apply #'concatenate 'array (mapcar #'concept->token-array concepts)) :lemmatized t))
concept.lisp:(defmethod-exported concept->words ((cname concept))
concept.lisp:(defmethod-exported concept->string ((cname concept))
concept.lisp:  (list-to-delimited-string (concept->words cname)))
concept.lisp:(defmethod-exported concept->token-array ((cname concept))
concept.lisp:        (aif-ret (lookup-canonical-concept-instance tlist)
concept.lisp:  (aif-ret (lookup-canonical-concept-instance tokens)
concept.lisp:  (register-new-concept-instance (make-instance 'concept :token-vector ta)))
concept.lisp:(defun test-concept-equality ()
init.lisp:    (clear-concept-cache)
reference.lisp:(defmethod find-phrase ((p phrase) (doc vector-document) &key (match :all) (start 0) (ignore-start nil) (ignore-end nil) (lemma nil) (concept-terms nil))
reference.lisp:		 (cond ((and concept-terms 
reference.lisp:		       ((and concept-terms
reference.lisp:				  &key (match :all) (start 0) (lemma nil) (concept-terms nil)
reference.lisp:					 :lemma lemma :concept-terms concept-terms)
reference.lisp:				  &key (match :words) (start 0) (lemma nil) (concept-terms nil)
reference.lisp:					 :concept-terms concept-terms)
