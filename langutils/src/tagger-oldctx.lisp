;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; Package: utils -*-
;;;; *************************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          tagger-ctxold
;;;; Purpose:       Non-macro version of context rule parser/generator
;;;;
;;;; Programmer:    Ian S. Eslick
;;;; Date Started:  October 2004
;;;;

(in-package :langutils)

(defun make-contextual-rule-old ( contextual-rule )
  (declare (optimize speed (safety 0))
	   (type list contextual-rule)
	   (inline svref))
  (let ((old (mkkeysym (first contextual-rule)))
	(new (mkkeysym (second contextual-rule)))
	(name (string-upcase (third contextual-rule)))
	(arg1 (fourth contextual-rule))
	(arg2 (fifth contextual-rule)))
    (cond ((string= name "SURROUNDTAG")
	   (let ((t1 (mkkeysym arg1))
		 (t2 (mkkeysym arg2)))
	     #'(lambda (tokens tags pos)
		 (declare (ignore tokens)
		          (type simple-vector tags)
			  (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (- pos 1)) t1)
			  (eq (svref tags (+ pos 1)) t2))
		     (progn 
		       (write-log tagger-contextual "SURROUNDTAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXTTAG")
	   (let ((t1 (mkkeysym arg1)))
	     #'(lambda (tokens tags pos)
		 (declare (ignore tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (+ pos 1)) t1))
		     (progn 
		       (write-log tagger-contextual "NEXTTAG: ~A @ ~A" contextual-rule pos)
		     (setf (svref tags pos) new))))))
	  ((string= name "CURWD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-array fixnum) tokens)
			   #-mcl (type simple-vector tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1))
		     (progn 
		       (write-log tagger-contextual "CURWD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXTWD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens (+ pos 1)) w1))
		     (progn 
		       (write-log tagger-contextual "NEXTWD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "RBIGRAM")
	   (let ((me (id-for-token arg1))
		 (next (id-for-token arg2)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) me)
			  (eq (aref tokens (+ pos 1)) next))
		     (progn 
		       (write-log tagger-contextual "RBIGRAM: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDNEXTTAG")
	   (let ((me (id-for-token arg1))
		 (t2 (mkkeysym arg2)))
	     #'(lambda (tokens tags pos)
		 (declare (type  #-mcl (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) me)
			  (eq (svref tags (+ pos 1)) t2))
		     (progn 
		       (write-log tagger-contextual "WDNEXTTAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDAND2AFT")
	   (let ((w1 (id-for-token arg1))
		 (w2 (id-for-token arg2)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1)
			  (eq (aref tokens (+ pos 2)) w2))
		     (progn 
		       (write-log tagger-contextual "WDAND2AFT: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDAND2TAGAFT")
	   (let ((w1 (id-for-token arg1))
		 (t2 (mkkeysym arg2)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1)
			  (eq (svref tags (+ pos 2)) t2))
		     (progn 
		       (write-log tagger-contextual "WDAND2TAGAFT: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT2TAG")
	   (let ((t1 (mkkeysym arg1)))
	     #'(lambda (tokens tags pos)
		 (declare (ignore tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (+ pos 2)) t1))
		     (progn 
		       (write-log tagger-contextual "NEXT2TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT2WD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens (+ pos 2)) w1))
		     (progn 
		       (write-log tagger-contextual "NEXT2WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXTBIGRAM")
	   (let ((t1 (mkkeysym arg1))
		 (t2 (mkkeysym arg2)))
	     #-mcl (declare (type symbol t1 t2))
	     #'(lambda (tokens tags pos)
		 (declare (ignore tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (+ pos 1)) t1)
			  (eq (svref tags (+ pos 2)) t2))
		     (progn 
		       (write-log tagger-contextual "NEXTBIGRAM: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT1OR2TAG")
	   (let ((t1 (mkkeysym arg1)))
	     #-mcl (declare (type symbol t1))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0))
			  (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (svref tags (+ pos 1)) t1)
			      (eq (svref tags (+ pos 2)) t1)))
		     (progn 
		       (write-log tagger-contextual "NEXT1OR2TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT1OR2WD")
	   (let ((w1 (id-for-token arg1)))
	     (declare (type fixnum w1))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (aref tokens (+ pos 1)) w1)
			      (eq (aref tokens (+ pos 2)) w1)))
		     (progn 
		       (write-log tagger-contextual "NEXT1OR2WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT1OR2OR3TAG")
	   (let ((t1 (mkkeysym arg1)))
	     (declare (type symbol t1))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0))
			   (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (svref tags (+ pos 1)) t1)
			      (eq (svref tags (+ pos 2)) t1)
			      (eq (svref tags (+ pos 3)) t1)))
		     (progn 
		       (write-log tagger-contextual "NEXT1OR2OR3TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "NEXT1OR2OR3WD")
	   (let ((w1 (id-for-token arg1)))
	     (declare (type fixnum w1))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (aref tokens (+ pos 1)) w1)
			      (eq (aref tokens (+ pos 2)) w1)
			      (eq (aref tokens (+ pos 2)) w1)))
		     (progn 
		       (write-log tagger-contextual "NEXT1OR2OR3WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREVTAG")
	   (let ((t1 (mkkeysym arg1)))
	     (declare (type symbol t1))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-array fixnum ) tokens)
			  #-mcl (type (simple-array symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0))
			  (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (- pos 1)) t1))
		     (progn 
		       (write-log tagger-contextual "PREVTAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREVWD")
	   (let ((w1 (id-for-token arg1)))
	     #-mcl (declare (type fixnum w1))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens (- pos 1)) w1))
		     (progn 
		       (write-log tagger-contextual "PREVWD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "LBIGRAM")
	   (let ((w1 (id-for-token arg1))
		 (w2 (id-for-token arg2)))
	     #-mcl (declare (type fixnum w1 w2))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1)
			  (eq (aref tokens (- pos 1)) w2))
		     (progn 
		       (write-log tagger-contextual "LBIGRAM: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDPREVTAG")
	   (let ((me (id-for-token arg1))
		 (t2 (mkkeysym arg2)))
	     #-mcl (declare (type fixnum me) (type symbol t2))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) me)
			  (eq (svref tags (- pos 1)) t2))
		     (progn 
		       (write-log tagger-contextual "WDPREVTAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDAND2BFR")
	   (let ((w1 (id-for-token arg1))
		 (w2 (id-for-token arg2)))
	     #-mcl (declare (type fixnum w1 w2))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1)
			  (eq (aref tokens (- pos 2)) w2))
		     (progn 
		       (write-log tagger-contextual "WDAND2BFR: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "WDAND2TAGBFR")
	   (let ((w1 (id-for-token arg1))
		 (t2 (mkkeysym arg2)))
	     #-mcl (declare (type fixnum w1) (type symbol t2))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type fixnum pos)
			  #-mcl (type (simple-array fixnum ) tokens)
			  #-mcl (type (simple-array symbol ) tags)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens pos) w1)
			  (eq (svref tags (- pos 2)) t2))
		     (progn 
		       (write-log tagger-contextual "WDAND2TAGBFR: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV2TAG")
	   (let ((t1 (mkkeysym arg1)))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0))
			  (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (- pos 2)) t1))
		     (progn 
		       (write-log tagger-contextual "PREV2TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV2WD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (eq (aref tokens (- pos 2)) w1))
		     (progn 
		       (write-log tagger-contextual "PREV2WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV1OR2TAG")
	   (let ((t1 (mkkeysym arg1)))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0))
			  (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (svref tags (- pos 1)) t1)
			      (eq (svref tags (- pos 2)) t1)))
		     (progn 
		       (write-log tagger-contextual "PREV1OR2TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV1OR2WD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (aref tokens (- pos 1)) w1)
			      (eq (aref tokens (- pos 2)) w1)))
		     (progn 
		       (write-log tagger-contextual "PREV1OR2WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV1OR2OR3TAG")
	   (let ((t1 (mkkeysym arg1)))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0))
			  (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (svref tags (- pos 1)) t1)
			      (eq (svref tags (- pos 2)) t1)
			      (eq (svref tags (- pos 3)) t1)))
		     (progn 
		       (write-log tagger-contextual "PREV1OR2OR3TAG: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREV1OR2OR3WD")
	   (let ((w1 (id-for-token arg1)))
	     #'(lambda (tokens tags pos)
		 (declare #-mcl (type (simple-vector fixnum ) tokens)
			  #-mcl (type (simple-vector symbol ) tags)
			  #-mcl (type fixnum pos)
			  (optimize speed (safety 0)))
		 (if (and (eq (svref tags pos) old)
			  (or (eq (aref tokens (- pos 1)) w1)
			      (eq (aref tokens (- pos 2)) w1)
			      (eq (aref tokens (- pos 3)) w1)))
		     (progn 
		       (write-log tagger-contextual "PREV1OR2OR3WD: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  ((string= name "PREVBIGRAM")
	   (let ((t1 (mkkeysym arg1))
		 (t2 (mkkeysym arg2)))
	     #'(lambda (tokens tags pos)
		 (declare  #-mcl (type (simple-vector fixnum ) tokens)
			   #-mcl (type (simple-vector symbol ) tags)
			   #-mcl (type fixnum pos)
			   (optimize speed (safety 0))
			   (ignore tokens))
		 (if (and (eq (svref tags pos) old)
			  (eq (svref tags (- pos 1)) t2)
			  (eq (svref tags (- pos 2)) t1))
		     (progn 
		       (write-log tagger-contextual "PREVBIGRAM: ~A @ ~A" contextual-rule pos)
		       (setf (svref tags pos) new))))))
	  (t (write-log tagger-contextual "Unrecognized rule: ~A" contextual-rule)))))

